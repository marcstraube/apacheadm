<IfModule ssl_module>
    <VirtualHost _default_*:443>
        # General setup for the virtual host
        ServerName www.example.com:443
        ServerAlias example.com:443
        ServerAdmin you@example.com
        DocumentRoot "/srv/http"

        # SSL Engine Switch
        # Enable/Disable SSL for this virtual host.
        SSLEngine on

        # Server Certificate:                                                         
        # Point SSLCertificateFile at a PEM encoded certificate.  If                  
        # the certificate is encrypted, then you will be prompted for a               
        # pass phrase.  Note that a kill -HUP will prompt again.  Keep                
        # in mind that if you have both an RSA and a DSA certificate you              
        # can configure both in parallel (to also allow the use of DSA                
        # ciphers, etc.)                                                              
        # Some ECC cipher suites (http://www.ietf.org/rfc/rfc4492.txt)                
        # require an ECC certificate which can also be configured in                  
        # parallel
        SSLCertificateFile "/etc/httpd/conf/server.crt"

        # Server Private Key:                                                         
        # If the key is not combined with the certificate, use this                   
        # directive to point at the key file.  Keep in mind that if                   
        # you've both a RSA and a DSA private key you can configure                   
        # both in parallel (to also allow the use of DSA ciphers, etc.)               
        # ECC keys, when in use, can also be configured in paralle
        SSLCertificateKeyFile "/etc/httpd/conf/server.key"

        # Server Certificate Chain:
        # Point SSLCertificateChainFile at a file containing the
        # concatenation of PEM encoded CA certificates which form the
        # certificate chain for the server certificate. Alternatively
        # the referenced file can be the same as SSLCertificateFile
        # when the CA certificates are directly appended to the server
        # certificate for convenience.
        #SSLCertificateChainFile "/etc/httpd/conf/server-ca.crt"

        # Certificate Authority (CA):
        # Set the CA certificate verification path where to find CA
        # certificates for client authentication or alternatively one
        # huge file containing all of them (file must be PEM encoded)
        # Note: Inside SSLCACertificatePath you need hash symlinks
        #       to point to the certificate files. Use the provided
        #       Makefile to update the hash symlinks after changes.
        #SSLCACertificatePath "/etc/httpd/conf/ssl.crt"
        #SSLCACertificateFile "/etc/httpd/conf/ssl.crt/ca-bundle.crt"

        # Certificate Revocation Lists (CRL):
        # Set the CA revocation path where to find CA CRLs for client
        # authentication or alternatively one huge file containing all
        # of them (file must be PEM encoded).
        # The CRL checking mode needs to be configured explicitly
        # through SSLCARevocationCheck (defaults to "none" otherwise).
        # Note: Inside SSLCARevocationPath you need hash symlinks
        #       to point to the certificate files. Use the provided
        #       Makefile to update the hash symlinks after changes.
        #SSLCARevocationPath /etc/httpd/conf/ssl.crl"
        #SSLCARevocationFile /etc/httpd/conf/ssl.crl/ca-bundle.crl"
        #SSLCARevocationCheck chain

        #SSLOpenSSLConfCmd DHParameters "/etc/httpd/conf/server-dhparams.pem"

        # SSL Engine Options:
        # Set various options for the SSL engine.
        # o FakeBasicAuth:
        #   Translate the client X.509 into a Basic Authorisation.  This means that
        #   the standard Auth/DBMAuth methods can be used for access control.  The
        #   user name is the `one line' version of the client's X.509 certificate.
        #   Note that no password is obtained from the user. Every entry in the user
        #   file needs this password: `xxj31ZMTZzkVA'.
        # o ExportCertData:
        #   This exports two additional environment variables: SSL_CLIENT_CERT and
        #   SSL_SERVER_CERT. These contain the PEM-encoded certificates of the
        #   server (always existing) and the client (only existing when client
        #   authentication is used). This can be used to import the certificates
        #   into CGI scripts.
        # o StdEnvVars:
        #   This exports the standard SSL/TLS related `SSL_*' environment variables.
        #   Per default this exportation is switched off for performance reasons,
        #   because the extraction step is an expensive operation and is usually
        #   useless for serving static content. So one usually enables the
        #   exportation for CGI and SSI requests only.
        # o StrictRequire:
        #   This denies access when "SSLRequireSSL" or "SSLRequire" applied even
        #   under a "Satisfy any" situation, i.e. when it applies access is denied
        #   and no other module can change it.
        # o OptRenegotiate:
        #   This enables optimized SSL connection renegotiation handling when SSL
        #   directives are used in per-directory context. 
        #SSLOptions +FakeBasicAuth +ExportCertData +StrictRequire
        <FilesMatch "\.(cgi|shtml|phtml|php)$">
            SSLOptions +StdEnvVars
        </FilesMatch>
        <Directory "/srv/http/cgi-bin">
            SSLOptions +StdEnvVars
        </Directory>

        # SSL Protocol Adjustments:
        # The safe and default but still SSL/TLS standard compliant shutdown
        # approach is that mod_ssl sends the close notify alert but doesn't wait for
        # the close notify alert from client. When you need a different shutdown
        # approach you can use one of the following variables:
        # o ssl-unclean-shutdown:
        #   This forces an unclean shutdown when the connection is closed, i.e. no
        #   SSL close notify alert is sent or allowed to be received.  This violates
        #   the SSL/TLS standard but is needed for some brain-dead browsers. Use
        #   this when you receive I/O errors because of the standard approach where
        #   mod_ssl sends the close notify alert.
        # o ssl-accurate-shutdown:
        #   This forces an accurate shutdown when the connection is closed, i.e. a
        #   SSL close notify alert is send and mod_ssl waits for the close notify
        #   alert of the client. This is 100% SSL/TLS standard compliant, but in
        #   practice often causes hanging connections with brain-dead browsers. Use
        #   this only for browsers where you know that their SSL implementation
        #   works correctly. 
        # Notice: Most problems of broken clients are also related to the HTTP
        # keep-alive facility, so you usually additionally want to disable
        # keep-alive for those clients, too. Use variable "nokeepalive" for this.
        # Similarly, one has to force some clients to use HTTP/1.0 to workaround
        # their broken HTTP/1.1 implementation. Use variables "downgrade-1.0" and
        # "force-response-1.0" for this.
        BrowserMatch "MSIE [2-5]" \
                 nokeepalive ssl-unclean-shutdown \
                 downgrade-1.0 force-response-1.0

        # Per-Server Logging
        ErrorLog "/var/log/httpd/error_log"
	TransferLog "/var/log/httpd/access_log"
        CustomLog "/var/log/httpd/ssl_request_log" \
                  "%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \"%r\" %b"
    </VirtualHost>
</IfModule>

