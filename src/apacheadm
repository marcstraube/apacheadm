#!/usr/bin/env bash

VERSION="1.2"
APACHE_CONFIG_PATH="/etc/httpd/conf"

if [ ${EUID} -ne 0 ]; then
  printf "apacheadm must be run as root!\n"
  exit 1
fi


help() {
  printf "Usage:\n"
  printf "apacheadm enable-module [module]     Enable a module.\n"
  printf "apacheadm disable-module [module]    Disable a module.\n"
  printf "apacheadm list-modules               List available modules.\n"
  printf "apacheadm enable-site [site]         Enable a site.\n"
  printf "apacheadm disable-site [site]        Disable a site.\n"
  printf "apacheadm list-sites                 List available sites.\n"
}

version() {
  printf "Version ${VERSION}\n"
}

get_module_prefix() {
  local prefix="10-"

  if [ ${module} == "unixd" ]; then
    prefix="00-"
  fi

  printf "${prefix}"
}

enable_module() {
  local module=${1}
  local prefix=$(get_module_prefix)

  if [ ! -f ${APACHE_CONFIG_PATH}/mods-available/${module}.load ]; then
    printf "Module ${module} not available.\n"
    exit 1
  fi

  local dependencies=`grep "^# Depends:" ${APACHE_CONFIG_PATH}/mods-available/${module}.load | cut -f2 -d:`

  if [ ! -z ${dependencies} ]; then
    for dependency in ${dependencies}; do
      printf "Checking dependency for ${module}: "
      enable_module ${dependency}
    done
  fi

  local conflicts=`grep "^# Conflicts:" ${APACHE_CONFIG_PATH}/mods-available/${module}.load | cut -f2 -d:`

  if [ ! -z "${conflicts}" ]; then
    for conflict in ${conflicts}; do
      printf "Conflict detected: you first have to disable ${conflict} before you can enable ${module}\n"
      exit 1
    done
  fi

  if [ -e ${APACHE_CONFIG_PATH}/mods-enabled/${prefix}${module}.load ]; then
    printf "Module ${module} already enabled.\n"
    return 0
  fi

  ln -s ../mods-available/${module}.load \
    ${APACHE_CONFIG_PATH}/mods-enabled/${prefix}${module}.load

  if [ -f ${APACHE_CONFIG_PATH}/mods-available/${module}.conf ]; then
    ln -s ../mods-available/${module}.conf \
      ${APACHE_CONFIG_PATH}/mods-enabled/${prefix}${module}.conf
  fi

  printf "Module ${module} enabled.\n"
}

disable_module() {
  local module=${1}
  local prefix=$(get_module_prefix)

  if [ ! -f ${APACHE_CONFIG_PATH}/mods-available/${module}.load ]; then
    printf "Module ${module} not available.\n"
    exit 1
  fi

  if [ -e ${APACHE_CONFIG_PATH}/mods-enabled/${prefix}${module}.load ]; then
    rm -f ${APACHE_CONFIG_PATH}/mods-enabled/${prefix}${module}.{load,conf}
    printf "Module ${module} disabled.\n"
  else
    printf "Module ${module} not enabled.\n"
  fi
}

list_modules() {
  local modules=`ls ${APACHE_CONFIG_PATH}/mods-available/*.load | rev | cut -d/ -f1 | rev`
  local list=""

  for module in ${modules}; do
    list+=" ${module/\.load/}"
  done
  
  printf "Available modules:${list}\n"
}

enable_site() {
  local site=${1}

  if [ -f ${APACHE_CONFIG_PATH}/sites-available/${site}.conf ]; then
    printf "Site ${site} not available.\n"
    exit 1
  fi

  if [ ! -e ${APACHE_CONFIG_PATH}/sites-enabled/${site}.load ]; then
    ln -s ../sites-available/${site}.conf ${APACHE_CONFIG_PATH}/sites-enabled/
    printf "Site ${site} enabled.\n"
  else
    printf "Site ${site} already enabled.\n"
  fi
}

disable_site() {
  local site=${1}

  if [ -f ${APACHE_CONFIG_PATH}/sites-available/${site}.conf ]; then
    printf "Site ${site} not available.\n"
    exit 1
  fi

  if [ -e ${APACHE_CONFIG_PATH}/sites-enabled/${site}.conf ]; then
    rm -f ${APACHE_CONFIG_PATH}/sites-enabled/${site}.conf
    printf "Site ${site} disabled.\n"
  else
    printf "Site ${site} not enabled.\n"
  fi
}

list_sites() {
  local sites=`ls ${APACHE_CONFIG_PATH}/sites-available/*.conf | rev | cut -d/ -f1 | rev`
  local list=""
  for site in ${sites}; do
    list+=" ${site/\.conf/}"
  done
  
  printf "Available sites:${list}\n"
}

case ${1} in
  "--help")         help;;
  "--version")      version;;
  "enable-module")  enable_module ${2};;
  "disable-module") disable_module ${2};;
  "list-modules")   list_modules;;
  "enable-site")    enable_site ${2};;
  "disable-site")   disable_site ${2};;
  "list-sites")     list_sites;;
  *)                printf "Unknown option ${1}\n"; exit 1;;
esac

